export declare const vertex = "\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main(void) {\n\tgl_Position = vec4(aVertexPosition, 1.0);\n\n\tvTextureCoord = aTextureCoord;\n}\n";
export declare const fragment = "\nprecision mediump float;\n\nvarying highp vec2 vTextureCoord;\n\nuniform sampler2D uImage;\nuniform mediump vec3 uDistortion;\nuniform mediump float uRatio;\n\nfloat computeScale(float distortion, float rsqLimit) {\n  if (distortion >= 0.0) {\n    return 1.0 + distortion * rsqLimit;\n  } else {\n    return 1.0 / (1.0 - distortion * rsqLimit);\n  }\n}\n\nvoid main(void) {\n\n  float rsq;\n  float rsqLimit;\n  if (uRatio < 1.0) {\n    rsq = pow((vTextureCoord.x - 0.5) * uRatio, 2.0) + pow(vTextureCoord.y - 0.5, 2.0);\n    rsqLimit = (pow(0.5 * uRatio, 2.0) + pow(0.5, 2.0)) / (2.0 / uRatio);\n  } else {\n    rsq = pow(vTextureCoord.x - 0.5, 2.0) + pow((vTextureCoord.y - 0.5) / uRatio, 2.0);\n    rsqLimit = (pow(0.5, 2.0) + pow(0.5 / uRatio, 2.0)) / (2.0 * uRatio);\n  }\n\n  vec3 scale = vec3(computeScale(uDistortion.r, rsqLimit),\n            computeScale(uDistortion.g, rsqLimit),\n            computeScale(uDistortion.b, rsqLimit));\n\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\n  vec2 redCoord = vec2(0.5 + (vTextureCoord.x - 0.5) * (1.0 + uDistortion.r * rsq) / scale.r,\n              0.5 + (vTextureCoord.y - 0.5) * (1.0 + uDistortion.r * rsq) / scale.r);\n\n  if (redCoord.x >= 0.0 && redCoord.x <= 1.0 && redCoord.y >= 0.0 && redCoord.y <= 1.0) {\n    gl_FragColor.r = texture2D(uImage, redCoord).r;\n    gl_FragColor.a += texture2D(uImage, redCoord).a / 3.0;\n  }\n\n  vec2 greenCoord = vec2(0.5 + (vTextureCoord.x - 0.5) * (1.0 + uDistortion.g * rsq) / scale.g,\n                0.5 + (vTextureCoord.y - 0.5) * (1.0 + uDistortion.g * rsq) / scale.g);\n\n  if (greenCoord.x >= 0.0 && greenCoord.x <= 1.0 && greenCoord.y >= 0.0 && greenCoord.y <= 1.0) {\n    gl_FragColor.g = texture2D(uImage, greenCoord).g;\n    gl_FragColor.a += texture2D(uImage, greenCoord).a / 3.0;\n  }\n\n  vec2 blueCoord = vec2(0.5 + (vTextureCoord.x - 0.5) * (1.0 + uDistortion.b * rsq) / scale.b,\n              0.5 + (vTextureCoord.y - 0.5) * (1.0 + uDistortion.b * rsq) / scale.b);\n\n  if (blueCoord.x >= 0.0 && blueCoord.x <= 1.0 && blueCoord.y >= 0.0 && blueCoord.y <= 1.0) {\n    gl_FragColor.b = texture2D(uImage, blueCoord).b;\n    gl_FragColor.a += texture2D(uImage, blueCoord).a / 3.0;\n  }\n}\n";
